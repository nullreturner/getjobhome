const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const ExtractTextPlugin = require('extract-text-webpack-plugin'); const precss = require('precss');
const autoprefixer = require('autoprefixer');

const CopyWebpackPlugin = require("copy-webpack-plugin");


const titles = [
  "index",
];

module.exports = {
  entry: [
    './src/app.js',
    'font-awesome/scss/font-awesome.scss',
  ],
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'dist')
  },
  plugins: [...titles.map(title => {
    return new HtmlWebpackPlugin({
      template: path.join(__dirname, "src/", `${title}.html`),
      path: path.join(__dirname, "dist"),
      filename: `${title}.html`,
      inject: true,
    });
  }),
  new ExtractTextPlugin('main.css'),
  new CopyWebpackPlugin([
    {
      from: "src/img",
      to: "img"
    }
  ]),
  ],
  module: {
    rules: [
      {
        test: /\.(scss)$/,
        use: ExtractTextPlugin.extract({
          fallback: 'style-loader',
          use: [
            {
              loader: 'css-loader'
            },
            {
              loader: 'postcss-loader',
              options: {
                plugins() {
                  return [
                    precss,
                    autoprefixer
                  ];
                }
              }
            },
            {
              loader: 'sass-loader'
            },
          ]
        })
      },

      ///////////////////////////////////////////
      {
        test: /\.woff2?(\?v=[0-9]\.[0-9]\.[0-9])?$/,
        use: 'url-loader?limit=10000',
      },
      {
        test: /\.(ttf|eot|svg)(\?[\s\S]+)?$/,
        use: 'file-loader',
      },
      {
        test: /\.(jpe?g|png|gif|svg)$/i,
        use: [
          'file-loader?name=img/[name].[ext]',
          'image-webpack-loader?bypassOnDebug'
        ]
      },
      {
        test: /font-awesome\.config\.js/,
        use: [
          { loader: 'style-loader' },
          { loader: 'font-awesome-loader' }
        ]
      },
      /////////////////////////////////////////

    ]
  }
};
